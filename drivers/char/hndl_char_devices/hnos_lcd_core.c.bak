/*
 * drivers/char/hndl_char_devices/hnos_lcd_core.c
 *
 * Based on uc1698fb.c from Linux 2.4 kernel, writen by licikui.
 *
 * The source code in this file can be freely used, adapted,
 * and redistributed in source or binary form, so long as an
 * acknowledgment appears in derived source files.  The citation
 * should list that the code comes from the book "Linux Device
 * Drivers" by Alessandro Rubini and Jonathan Corbet, published
 * by O'Reilly & Associates.   No warranty is attached;
 * we cannot take responsibility for errors or fitness for use.
 */

#include "hnos_generic.h"
#include "hnos_lcd_cog.h"
#include "hnos_proc.h"
#include "hnos_kbd.h"

#define DEVICE_NAME	"fb0"

struct at91_lcd_cdev *lcd_COG_device;
static struct proc_dir_entry *hndl_proc_dir = NULL;

static unsigned char uc1698fb_data[UC1698FB_ROW_SIZE*UC1698FB_COLUMN_SIZE/8] = {0};

static unsigned int uc1698fb_temp_comp = 0x2;  /* Temp Compensation, range from 0x0 to 0x3.*/
module_param(uc1698fb_temp_comp, int, S_IRUGO);

static unsigned int uc1698fb_bias_ratio = 0x2; /* LCD bias ratio, range from 0x0 to 0x3.*/
module_param(uc1698fb_bias_ratio, int, S_IRUGO);

static unsigned int uc1698fb_bias_data = 0xa1; /* Vbias Potentiometer, range from 0x0 to 0xff.*/ 
module_param(uc1698fb_bias_data, int, S_IRUGO);

static int lcd_major =   0;
static int lcd_minor =   0;
module_param(lcd_major, int, S_IRUGO);
module_param(lcd_minor, int, S_IRUGO);

struct uc1698fb_callbacks uc1698fb_cbs;

//---------------增加用于串行液晶，uc1698u-------------------------------------
//----------uc1698c，新的串行液晶------------
//核心板增加两管脚（97、98脚），做液晶I2C总线，97脚LCD
//SDA'接核心板中单片机PC19(J1)
//98脚LCD
//SCK'接核心板中单片机的PC18（H1）

//#define RS_HIGH   writeb(0, UC1698FB_CMD_ADDR+1)  //写数据
//#define RS_LOW    writeb(0, UC1698FB_CMD_ADDR)    //写指令

#define RS_HIGH    AT91C_BASE_PIOA->PIO_SODR=AT91C_PIO_PA22      //写数据
#define RS_LOW     AT91C_BASE_PIOA->PIO_CODR=AT91C_PIO_PA22     //写指令
#define nCS_HIGH   AT91C_BASE_PIOB->PIO_SODR=AT91C_PIO_PB20
#define nCS_LOW    AT91C_BASE_PIOB->PIO_CODR=AT91C_PIO_PB20 
#define SDA_HIGH   AT91C_BASE_PIOC->PIO_SODR=AT91C_PIO_PC19
#define SDA_LOW    AT91C_BASE_PIOC->PIO_CODR=AT91C_PIO_PC19
#define SCLK_HIGH  AT91C_BASE_PIOC->PIO_SODR=AT91C_PIO_PC18
#define SCLK_LOW   AT91C_BASE_PIOC->PIO_CODR=AT91C_PIO_PC18

void write_cmd(uchar cmd)
 {
  uchar Scnt;
  RS_LOW;
 // udelay(1);
  nCS_LOW;
  Scnt=8;
  while(Scnt--)
  {
	  SCLK_LOW;
	  //udelay(1);
	  SDA_LOW;
	  //udelay(1);
	  if (cmd&0x80)
	  {
	    SDA_HIGH;
	   // udelay(1);
	  }
	  SCLK_HIGH;
	  //udelay(1);
	  cmd<<=1;
  }
  nCS_HIGH;
 // udelay(1);
 }
 
 
 void write_data(uchar dat)
 {
  uchar Scnt;
  RS_HIGH;
 // udelay(1);
  nCS_LOW;
  Scnt=8;
  while(Scnt--)
  {
	  SCLK_LOW;
	 // udelay(1);
	  SDA_LOW;
	 // udelay(1);
	  if (dat&0x80)
	  {
	    SDA_HIGH;
	 //   udelay(1);
	  }
	  SCLK_HIGH;
	 // udelay(1);
	  dat<<=1;
  }
  nCS_HIGH;
  //udelay(1);
 }
 
 my_writeb(uchar dat,void*flag)
 {
	 	if (flag==UC1698FB_CMD_ADDR+1)//data
	 	{
	 		write_data(dat);
	 		
	 	}else//cmd
	 	{
	 		write_cmd(dat);
	 	}
 	
 }

//----------uc1698c end -------

//------------------------------------------------------

int uc1698fb_callbacks_register(struct uc1698fb_callbacks *cbs)
{
    if (unlikely(!cbs)) {
        printk(KERN_ERR "%s: invalid param.\n", __FUNCTION__);
        return -EINVAL;
    }

    if (cbs->init) {
        uc1698fb_cbs.init = cbs->init;
        uc1698fb_cbs.init();
    }

    if (cbs->reset) {
        uc1698fb_cbs.reset = cbs->reset;
        cbs->reset();
    }

    if (cbs->backlight) {
        uc1698fb_cbs.backlight = cbs->backlight;
    }

    return 0;
}

int uc1698fb_callbacks_unregister(struct uc1698fb_callbacks *cbs)
{
    if (unlikely(!cbs)) {
        printk(KERN_ERR "%s: invalid param.\n", __FUNCTION__);
        return -EINVAL;
    }

    if (cbs->init) {
        uc1698fb_cbs.init = NULL;
    }

    if (cbs->reset) {
        uc1698fb_cbs.reset = NULL;
    }

    if (cbs->backlight) {
        uc1698fb_cbs.backlight = NULL;
    }

    return 0;
}

void uc1698fb_bias_ratio_set(unsigned char data, struct at91_lcd_cdev *dev) 
{
    void __iomem *ioaddr_cmd = dev->ioaddr_cmd;
    uc1698fb_bias_ratio = data & 0x3;

    UC1698FB_SET_BIAS_RATIO(ioaddr_cmd, uc1698fb_bias_ratio);
    return;
}

unsigned char uc1698fb_bias_ratio_get(void)
{
    return uc1698fb_bias_ratio;
}

void uc1698fb_bias_data_set(unsigned char data)
{
    void __iomem *ioaddr_cmd = lcd_COG_device->ioaddr_cmd;
    uc1698fb_bias_data = data;
    UC1698FB_SET_VBIAS_PM(ioaddr_cmd, uc1698fb_bias_data);
    return;
}

unsigned char uc1698fb_bias_data_get(void)
{
    return uc1698fb_bias_data;
}

void uc1698fb_temp_comp_set(unsigned char data)
{
    void __iomem *ioaddr_cmd = lcd_COG_device->ioaddr_cmd;
    uc1698fb_temp_comp = data & 0x3;
    UC1698FB_SET_TEMP_COMP(ioaddr_cmd, uc1698fb_temp_comp);
    return;
}

unsigned char uc1698fb_temp_comp_get(void)
{
    return uc1698fb_temp_comp;
}

void  uc1698fb_reset(void)
{
    void __iomem *ioaddr_cmd = lcd_COG_device->ioaddr_cmd;

    if (uc1698fb_cbs.reset) {
        uc1698fb_cbs.reset();
    }

    UC1698FB_SYSTEM_RESET(ioaddr_cmd);
    return;
}

void uc1698fb_blt_generic(unsigned char action)
{
    if (UC1698FB_LCD_BACKLIGHT_ON == action) {
        at91_set_gpio_output(UC1698FB_LCD_BACKLIGHT_PIN, 1);
    } else if (UC1698FB_LCD_BACKLIGHT_OFF == action) {
        at91_set_gpio_output(UC1698FB_LCD_BACKLIGHT_PIN, 0);
    }

    return;
}

int uc1698fb_back_light(unsigned int action)
{
    if (uc1698fb_cbs.backlight) {
        uc1698fb_cbs.backlight(action);
    } else {
        uc1698fb_blt_generic(action);
    }

    return 0;
}

static int uc1698fb_chip_probe(void)
{
    void __iomem *ioaddr_cmd = lcd_COG_device->ioaddr_cmd;
    unsigned char status = 0;
    unsigned char product_code = 0;

    /* 
     * FIXME:
     * The LCD had been initialized in U-Boot, so we may not nead this.
     * */

    uc1698fb_reset();
    mdelay(5);

    /* Get chip status and product ID. */
    status = readb(ioaddr_cmd);
    product_code = readb(ioaddr_cmd);
    product_code = readb(ioaddr_cmd);
    product_code &= 0xf0;

    dprintk("%s: status=0x%2x, product_code=0x%2x\n",__FUNCTION__, status, product_code);
    if (UC1698FB_CHIP_STATUS == status 
            && ((UC1698FB_PRODUCT_CODE == product_code )||(0x90 == product_code))) {
        HNOS_DEBUG_INFO("Chip UC1698U found, status %2x, product_code %2x\n", status, product_code);
        return 0;
    }

    HNOS_DEBUG_INFO("No UC1698U chip found,status %2x, product_code %2x\n", status, product_code); 
    return 0; 
}

static void uc1698fb_chip_init(struct at91_lcd_cdev *dev)
{
    void __iomem *ioaddr_cmd = dev->ioaddr_cmd;

    UC1698FB_SET_SCROLL_LINE(ioaddr_cmd, 0);	/* no scroll */
    UC1698FB_SET_PARTIAL_CNTRL(ioaddr_cmd, 0);	/* partial display disabled */
    UC1698FB_SET_FIXED_LINE(ioaddr_cmd, 0);         /* fixed line 0*/

    UC1698FB_SET_PIXEL_ON(ioaddr_cmd, 0);
    UC1698FB_SET_INVERSE_DISP(ioaddr_cmd, 0);

    UC1698FB_SET_ADV_POWER(ioaddr_cmd, 0x08);
    UC1698FB_SET_POWER_CNTRL(ioaddr_cmd, 0x3);

    UC1698FB_SET_TEMP_COMP(ioaddr_cmd, uc1698fb_temp_comp);

    UC1698FB_SET_LINE_RATE(ioaddr_cmd, 0);
    UC1698FB_SET_BIAS_RATIO(ioaddr_cmd, uc1698fb_bias_ratio);

    UC1698FB_SET_COM_END(ioaddr_cmd, UC1698FB_ROW_SIZE - 1);

    UC1698FB_SET_VBIAS_PM(ioaddr_cmd, uc1698fb_bias_data);

    UC1698FB_SET_MAPPING_CNTRL(ioaddr_cmd, 4); 
    UC1698FB_SET_RAM_ADDR_CNTRL(ioaddr_cmd, 1);  /* no automatic wrap, CA auto-increment first, +1 */

    UC1698FB_SET_COLOR_PATTERN(ioaddr_cmd, 1);  /* RGB */
    UC1698FB_SET_COLOR_MODE(ioaddr_cmd, 1);     /* 4K color mode */

    UC1698FB_SET_NLINE_INV(ioaddr_cmd, 0x18);
    UC1698FB_SET_DISPLAY_ENABLE(ioaddr_cmd, 0x5); /* display enabled, green enhancing mode disabled */

    /* Window program init */
    UC1698FB_SET_WINDOW_COLUMN_START(ioaddr_cmd, UC1698FB_COLUMN_START/3);	
    UC1698FB_SET_WINDOW_COLUMN_END(ioaddr_cmd, (UC1698FB_COLUMN_START+UC1698FB_COLUMN_SIZE)/3);

    UC1698FB_SET_WINDOW_ROW_START(ioaddr_cmd, 0);
    UC1698FB_SET_WINDOW_ROW_END(ioaddr_cmd, UC1698FB_ROW_SIZE-1);

    UC1698FB_SET_WINDOW_MODE(ioaddr_cmd, 0);  /* inside mode */

    /* SRAM Position init */
    UC1698FB_SET_ROW_ADDRS(ioaddr_cmd, 0);   /* SRAM row address start 0 */
    UC1698FB_SET_COLUMN_ADDR(ioaddr_cmd, UC1698FB_COLUMN_START/3);/* SRAM column address start 0 */

    return;
}

/* 
 * Turn 1 byte B/W data to 4k-color data (RRRR-GGGG-BBBB)
 * NOTE: out_picture array size should >= 4 
 * */
static int  uc1698fb_BW2color(unsigned char in_picture, unsigned char *out_picture)
{
    int ret = 0;  
    unsigned char temp, temp1, temp2, temp3, temp4, temp5, temp6, temp7, temp8; 
    unsigned char h11, h12, h13, h14, h15, h16, h17, h18; 

    if (!out_picture){
        return -1;
    }

    temp = in_picture;   
    temp1 = temp & 0x80; 
    temp2 = (temp & 0x40) >> 3; 
    temp3 = (temp & 0x20) << 2; 
    temp4 = (temp & 0x10) >> 1; 
    temp5 = (temp & 0x08) << 4; 
    temp6 = (temp & 0x04) << 1; 
    temp7 = (temp & 0x02) << 6; 
    temp8 = (temp & 0x01) << 3; 

    h11 = temp1 | temp1 >> 1 | temp1 >> 2 | temp1 >> 3; 
    h12 = temp2 | temp2 >> 1 | temp2 >> 2 | temp2 >> 3; 
    h13 = temp3 | temp3 >> 1 | temp3 >> 2 | temp3 >> 3; 
    h14 = temp4 | temp4 >> 1 | temp4 >> 2 | temp4 >> 3; 
    h15 = temp5 | temp5 >> 1 | temp5 >> 2 | temp5 >> 3; 
    h16 = temp6 | temp6 >> 1 | temp6 >> 2 | temp6 >> 3; 
    h17 = temp7 | temp7 >> 1 | temp7 >> 2 | temp7 >> 3; 
    h18 = temp8 | temp8 >> 1 | temp8 >> 2 | temp8 >> 3; 

    *out_picture = h11 | h12; 
    *(out_picture + 1) = h13 | h14; 
    *(out_picture + 2) = h15 | h16; 
    *(out_picture + 3) = h17 | h18; 

    return ret;
}


static inline void uc1698fb_write_data(unsigned char *buf, unsigned char size)
{
    int i = 0; 
    void __iomem *ioaddr_data = lcd_COG_device->ioaddr_data;

    for (i=0; i<size; i++) {
        writeb(buf[i], ioaddr_data);
    }

    return;
}

static ssize_t uc1698fb_write(struct file *filp, const char __user *buf, size_t count, loff_t *f_pos)
{	
    struct at91_lcd_cdev *dev = filp->private_data; 
    int i = 0, j = 0;
    unsigned char color_data_buf[4] = {0};

    unsigned int nr_columns = UC1698FB_COLUMN_SIZE / 8;
    unsigned int nr_rows = UC1698FB_ROW_SIZE;

    if (!dev) {
        return -ENODEV;
    }

    if (count != UC1698FB_ROW_SIZE * UC1698FB_COLUMN_SIZE / 8) {
        printk("%s: count should be %d \n", __FUNCTION__, 
                UC1698FB_ROW_SIZE * UC1698FB_COLUMN_SIZE / 8);
        return -1;
    } 

    if (copy_from_user(uc1698fb_data, buf, count)) {
        printk("%s: error occured while copy data from user.\n", __FUNCTION__);
        return -1;
    }

    /*
     * FIXME:
     * It seems that before you write data to uc1698, you should init it first.
     * */
    uc1698fb_chip_init(dev);

    for(i=0; i<nr_rows; i++) {
        for(j=0; j<nr_columns; j++){
            uc1698fb_BW2color(*(uc1698fb_data + i * nr_columns + j), color_data_buf);
            uc1698fb_write_data(color_data_buf, sizeof(color_data_buf));
        }   	

        writeb(0x00, dev->ioaddr_data); // ?
    }

    return count;
}

int uc1698fb_proc_read_CtlReg(char *buf, char **start, off_t offset,
		int count, int *eof, void *data)
{
	int len = 0;
    int k;
	void __iomem *ioaddr_cmd = lcd_COG_device->ioaddr_cmd;
	unsigned char read_buff[3] = {0};
    
    for (k=0;k<3;k++)    
	    read_buff[k] = readb(ioaddr_cmd);
	
	len += sprintf(buf+len, "status_reg0  :\t0x%2x\n", read_buff[0]);
	len += sprintf(buf+len, "status_reg1  :\t0x%2x\n", read_buff[1]);
	len += sprintf(buf+len, "status_reg2  :\t0x%2x\n", read_buff[2]);

	*eof = 1;
	
	return len;
}


int uc1698fb_proc_read(char *buf, char **start, off_t offset,
        int count, int *eof, void *data)
{
    int len = 0;
    len += sprintf(buf+len, "lcd_bias   :\t0x%2x\n", uc1698fb_bias_data_get());
    len += sprintf(buf+len, "temp_comp  :\t0x%2x\n", uc1698fb_temp_comp_get());
    len += sprintf(buf+len, "bias_ratio :\t0x%2x\n", uc1698fb_bias_ratio_get());

    *eof = 1;
    return len;
}

static int uc1698fb_proc_write(struct file *file, const char __user * userbuf,
        unsigned long count, void *data)
{
    unsigned int value = 0;
    char val[14] = {0};

    if (count >= 14){
        return -EINVAL;
    }

    if (copy_from_user(val, userbuf, count)){
        return -EFAULT;
    }

    value = (unsigned int)simple_strtoull(val, NULL, 0);

    dprintk(KERN_INFO "\n%s:val=%s,after strtoull,value=0x%08x\n",
            __FUNCTION__, val, value);

    uc1698fb_bias_data_set(value&0xff);
    return count;
}

static int uc1698fb_open(struct inode *inode, struct file *filp)
{
    struct at91_lcd_cdev *dev; 

    dev = container_of(inode->i_cdev, struct at91_lcd_cdev, cdev);
    filp->private_data = dev; /* for other methods */

    if (test_and_set_bit(0, &dev->is_open) != 0) {
        return -EBUSY;       
    }

    return 0; 
}

static int uc1698fb_release(struct inode *inode, struct file *filp)
{
    struct at91_lcd_cdev *dev = filp->private_data; 

    if (test_and_clear_bit(0, &dev->is_open) == 0) {/* release lock, and check... */
        return -EINVAL; /* already released: error */
    }

    return 0;
}


struct file_operations lcd_fops =
{
    .owner =    THIS_MODULE,
    .open =     uc1698fb_open,
    .release =  uc1698fb_release,
    .write = uc1698fb_write,
};

static int  uc1698fb_cdev_setup(struct at91_lcd_cdev *dev, dev_t devno)
{
    int err = 0;

    cdev_init(&dev->cdev, &lcd_fops);
    dev->cdev.owner = THIS_MODULE;
    err = cdev_add(&dev->cdev, devno, 1);

    if (err) { 
        printk(KERN_NOTICE "Error %d adding LCD(COG) device, major_%d", err, MAJOR(devno));
    }
    return err;
}

/*
 * The cleanup function is used to handle initialization failures as well.
 * Therefor, it must be careful to work correctly even if some of the items
 * have not been initialized.
 */
void uc1698fb_module_cleanup(void)
{
    dev_t devno = MKDEV(lcd_major, lcd_minor);	
    struct class *myclass;

    if (lcd_COG_device){
        lcd_blt_unregister(uc1698fb_back_light);

        /* Get rid of our char dev entries */	
        cdev_del(&lcd_COG_device->cdev);	

        myclass = lcd_COG_device->myclass;
        if (myclass){
            class_device_destroy(myclass, devno);
            class_destroy(myclass);
        }

        if (lcd_COG_device->ioaddr_cmd) {
            iounmap(lcd_COG_device->ioaddr_cmd);
            lcd_COG_device->ioaddr_cmd = NULL;
            lcd_COG_device->ioaddr_data = NULL;
            release_mem_region(UC1698FB_CMD_ADDR, UC1698FB_IOMEM_SIZE);
        }

        kfree(lcd_COG_device);
        lcd_COG_device = NULL;
    }

    remove_proc_entry("lcd_status", hndl_proc_dir);
    remove_proc_entry("lcd_reg_status", hndl_proc_dir);
    hnos_proc_rmdir();

    /* cleanup_module is never called if registering failed */
    unregister_chrdev_region(devno, 1);

    HNOS_DEBUG_INFO("Cleanup device %s, major %d \n", DEVICE_NAME, lcd_major);
    return;
}

/*
 * Finally, the module stuff
 */
static int __init  uc1698fb_module_init(void)
{
    int result = 0;
    dev_t dev = 0;
    struct class *myclass = NULL;
    void __iomem *ioaddr_cmd = NULL;

    struct proc_dir_entry *proc = NULL;

    /*
     * Get a range of minor numbers to work with, asking for a dynamic
     * major unless directed otherwise at load time.
     */
    if (lcd_major) {
        dev = MKDEV(lcd_major, lcd_minor);
        result = register_chrdev_region(dev, 1, DEVICE_NAME);
    } else {
        result = alloc_chrdev_region(&dev, lcd_minor, 1, DEVICE_NAME);
        lcd_major = MAJOR(dev);
    }
    if (result < 0) {
        printk(KERN_WARNING "hndl_kb: can't get major %d\n", lcd_major);
        return result;
    }	

    /* 
     * allocate the devices -- we do not have them static.
     */
    lcd_COG_device = kmalloc(sizeof(struct at91_lcd_cdev), GFP_KERNEL);
    if (!lcd_COG_device) {
        result = -ENOMEM;
        goto alloc_failed;  /* Make this more graceful */
    }
    memset(lcd_COG_device, 0, sizeof(struct at91_lcd_cdev));	
    spin_lock_init(&lcd_COG_device->lock);

    if (!request_mem_region(UC1698FB_CMD_ADDR, UC1698FB_IOMEM_SIZE, "uc1698fb")) {
        printk("%s: request mem region error.\n", __FUNCTION__);
        result = -1;
        goto region_failed;
    }

    ioaddr_cmd = ioremap(UC1698FB_CMD_ADDR, UC1698FB_IOMEM_SIZE);
    if (!ioaddr_cmd) {
        printk(KERN_ERR "Can NOT remap address 0x%08x\n", UC1698FB_CMD_ADDR);
        result = -1;
        goto remap_failed;
    }

    lcd_COG_device->ioaddr_cmd = ioaddr_cmd;
    lcd_COG_device->ioaddr_data = ioaddr_cmd + 1;

    /* Register a class_device in the sysfs. */
    myclass = class_create(THIS_MODULE, DEVICE_NAME);
    if (myclass == NULL) {
        result = -ENOMEM;
        printk("%s: class_create fail.\n", __FUNCTION__);
        goto class_failed;
    }
    lcd_COG_device->myclass = myclass;

    class_device_create(myclass, NULL, dev, NULL, DEVICE_NAME);

    if (uc1698fb_cdev_setup(lcd_COG_device, dev) < 0) {
        result = -1;
        printk("%s: uc1698fb_cdev_setup fail.\n", __FUNCTION__);
        goto cdev_failed;
    }

    if (uc1698fb_chip_probe() < 0) {
        result = -1;
        printk("%s: uc1698fb_chip_probe fail.\n", __FUNCTION__);
        goto probe_failed;
    } 
    uc1698fb_chip_init(lcd_COG_device);

    if (!hndl_proc_dir) {
        hndl_proc_dir = hnos_proc_mkdir();
    }

    if (!hndl_proc_dir) {
        result = -ENODEV;
        printk("%s: creat proc dir fail.\n", __FUNCTION__);
        goto probe_failed;
        
    } else {
        proc = create_proc_read_entry("lcd_status", S_IFREG | S_IRUGO | S_IWUSR, 
                hndl_proc_dir, uc1698fb_proc_read, NULL);
        if (proc) {
            proc->write_proc = uc1698fb_proc_write;
        } else {
            result = -1;
            printk("%s: creat proc fail.\n", __FUNCTION__);
            goto proc_entry_failed;
        }

		proc = create_proc_read_entry("lcd_reg_status", S_IFREG | S_IRUGO | S_IWUSR, 
				hndl_proc_dir, uc1698fb_proc_read_CtlReg, NULL);
		if (!proc) {
			result = -1;
			goto proc_entry_failed1;
		}
        
    }

    result = lcd_blt_register(uc1698fb_back_light);
    if (result) {
        goto lcd_blt_err;
    }

    HNOS_DEBUG_INFO("Initialized device %s, major %d \n", DEVICE_NAME, lcd_major);
    return 0;

lcd_blt_err:
    remove_proc_entry("lcd_reg_status", hndl_proc_dir);
    
proc_entry_failed1:
    remove_proc_entry("lcd_status", hndl_proc_dir);

proc_entry_failed:
    hnos_proc_rmdir();

probe_failed:
    cdev_del(&lcd_COG_device->cdev);	

cdev_failed:
    if (myclass){
        class_device_destroy(myclass, dev);
        class_destroy(myclass);
    }

class_failed:
    iounmap(lcd_COG_device->ioaddr_cmd);
    lcd_COG_device->ioaddr_cmd = NULL;
    lcd_COG_device->ioaddr_data = NULL;

remap_failed:
    release_mem_region(UC1698FB_CMD_ADDR, UC1698FB_IOMEM_SIZE);

region_failed:
    kfree(lcd_COG_device);
    lcd_COG_device = NULL;

alloc_failed:
    unregister_chrdev_region(dev, 1);

    return result;
}

module_init(uc1698fb_module_init);
module_exit(uc1698fb_module_cleanup);

EXPORT_SYMBOL(uc1698fb_back_light);
EXPORT_SYMBOL(uc1698fb_callbacks_register);
EXPORT_SYMBOL(uc1698fb_callbacks_unregister);

MODULE_LICENSE("Dual BSD/GPL");

